<link rel="stylesheet" href="/css/cart.css">

<div class="container mt-5">
  <h1 class="block__title mb-3 text-center">Giỏ<span class="highlight"> Hàng
  </span>
  </h1>

  <!-- Hiển thị sản phẩm trong giỏ hàng hoặc thông báo khi giỏ hàng trống -->
  <div id="cart-items"></div>
  <p id="empty-cart-message" class="text-center text-danger mb-4"></p>

  <!-- Thêm vào sau phần hiển thị sản phẩm trong giỏ hàng -->
  <div class="text-center text-black d-flex justify-content-end mt-3">
    <h3>Tổng Tiền: <span id="total-price">0₫</span></h3>
  </div>

  <!-- Thêm nút thanh toán -->
  <div class="text-center mt-3">
    <button class="btn btn-success" onclick="redirectToPayment()">Thanh toán</button>
  </div>


  <div class="text-center mt-3">
    <a href="http://localhost:7749" class="btn btn-primary mb-3">Quay lại trang chủ</a>
  </div>
</div>

{{!-- <script>
// Lấy dữ liệu từ Local Storage và hiển thị sản phẩm trong giỏ hàng
    document.addEventListener("DOMContentLoaded", function() {
      displayCartItems();
    });

    function calculateTotalPrice(cartItems) {
  var totalPrice = 0;

  cartItems.forEach(function(item) {
    // Cộng giá sản phẩm vào tổng tiền
    totalPrice += parseFloat(item.price.replace('₫', '').replace(',', ''));
  });

  return totalPrice;
}

    function displayCartItems() {
  var cartItems = JSON.parse(localStorage.getItem('cart')) || [];

  var cartItemsContainer = document.getElementById('cart-items');
  var emptyCartMessage = document.getElementById('empty-cart-message');
  var totalPriceElement = document.getElementById('total-price');
  
  cartItemsContainer.innerHTML = ''; // Xóa nội dung hiện tại để cập nhật lại

  if (cartItems.length === 0) {
    emptyCartMessage.innerText = 'Không có sản phẩm trong giỏ hàng!';
    totalPriceElement.innerText = '0₫'; // Đặt tổng tiền là 0 nếu giỏ hàng trống
  } else {
    emptyCartMessage.innerText = ''; // Nếu có sản phẩm, ẩn thông báo
    var total = calculateTotalPrice(cartItems);

    // Hiển thị tổng tiền với định dạng tiền tệ
    totalPriceElement.innerText = formatCurrency(total);

    cartItems.forEach(function(item, index) {
      var productHTML = `
            <div class="card mb-3">
              <div class="row g-0">
                <div class="col-md-3">
                  <img src="${item.image}" alt="${item.name}" class="img-fluid rounded p-3">
                </div>
                <div class="col-md-9">
                  <div class="card-body d-flex flex-column">
                    <h5 class="card-title">${item.name}</h5>
                    <p class="card-text">${item.price}</p>
                    <!-- Thêm các thông tin sản phẩm khác cần hiển thị -->
                    <button class="btn btn-danger mx-3" onclick="removeItem(${index})">
                      <i class="bi bi-trash"></i> Xoá sản phẩm
                    </button>
                  </div>
                </div>
              </div>
            </div>
          `;
      cartItemsContainer.innerHTML += productHTML;
    });
  }
}

// Hàm định dạng số thành tiền tệ
function formatCurrency(amount) {
  return new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(amount);
}
    function removeItem(index) {
      var cartItems = JSON.parse(localStorage.getItem('cart')) || [];
      cartItems.splice(index, 1);
      localStorage.setItem('cart', JSON.stringify(cartItems));
      displayCartItems(); // Cập nhật hiển thị giỏ hàng sau khi xoá
    }
</script> --}}

<script>
  document.addEventListener("DOMContentLoaded", function() {
    displayCartItems();
  });

  //function calculateTotalPriceWithCount(cartItems, productCounts) {
    //var total = 0;

    //Object.keys(productCounts).forEach(function(productName) {
      //var product = cartItems.find(item => item.name === productName);
      //var productCount = productCounts[productName];
      //total += parseFloat(product.price.replace('₫', '').replace(',', '')) * productCount;
    //});

    //return total;
  //}

  function calculateTotalPriceWithCount(cartItems, productCounts) {
  var total = 0;

  Object.keys(productCounts).forEach(function(productName) {
    var product = cartItems.find(item => item.name === productName);
    var productCount = productCounts[productName];

    // Loại bỏ dấu chấm ngăn cách phần ngàn và phần triệu
    var priceWithoutSeparator = product.price.replace(/\./g, '');
    
    // Chuyển đổi thành số và nhân với số lượng
    total += parseFloat(priceWithoutSeparator.replace('₫', '')) * productCount;
  });

  return total;
  }

  // Ví dụ về cách thêm sản phẩm vào giỏ hàng
  function addItemToCart(item) {
    var cartItems = JSON.parse(localStorage.getItem('cart')) || [];
    cartItems.push({
      name: item.name,
      image: item.image,
      price: item.price, // Đảm bảo giá của sản phẩm được thiết lập đúng
    });
    localStorage.setItem('cart', JSON.stringify(cartItems));
    displayCartItems();
  }

  function displayCartItems() {
  var cartItems = JSON.parse(localStorage.getItem('cart')) || [];

  var cartItemsContainer = document.getElementById('cart-items');
  var emptyCartMessage = document.getElementById('empty-cart-message');
  var totalPriceElement = document.getElementById('total-price');

  cartItemsContainer.innerHTML = ''; // Xóa nội dung hiện tại để cập nhật lại

  if (cartItems.length === 0) {
    emptyCartMessage.innerText = 'Không có sản phẩm trong giỏ hàng!';
    totalPriceElement.innerText = 'Tổng giá: 0₫'; // Đặt tổng tiền là 0 nếu giỏ hàng trống
  } else {
    emptyCartMessage.innerText = ''; // Nếu có sản phẩm, ẩn thông báo

    // Tạo một đối tượng để lưu trữ số lượng của từng sản phẩm
    var productCounts = {};

    cartItems.forEach(function(item, index) {
      // Kiểm tra xem sản phẩm đã tồn tại trong đối tượng productCounts chưa
      if (productCounts[item.name]) {
        // Nếu đã tồn tại, tăng số lượng lên 1
        productCounts[item.name]++;
      } else {
        // Nếu chưa tồn tại, tạo mới với số lượng là 1
        productCounts[item.name] = 1;
      }
    });

    // Hiển thị sản phẩm và số lượng trong giỏ hàng
    Object.keys(productCounts).forEach(function(productName) {
      var productCount = productCounts[productName];
      var productHTML = `
        <div class="card mb-3">
          <div class="row g-0">
            <div class="col-md-3">
              <img src="${cartItems.find(item => item.name === productName).image}" alt="${productName}" class="img-fluid rounded p-3">
            </div>
            <div class="col-md-9">
              <div class="card-body d-flex flex-column">
                <h5 class="card-title">${productName}</h5>
                <p class="card-text">${cartItems.find(item => item.name === productName).price} (x${productCount})</p>
                <!-- Thêm các thông tin sản phẩm khác cần hiển thị -->
                <div class="row mx-3 text-center d-flex justify-content-end">
                  <div class="col-3">
                    <button class="btn btn-danger w-100 " onclick="removeItemByName('${productName}')">
                    <i class="bi bi-trash"></i> Xoá sản phẩm
                  </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      `;
      cartItemsContainer.innerHTML += productHTML;
    });

    // Tính tổng tiền dựa trên danh sách sản phẩm có số lượng
    var total = calculateTotalPriceWithCount(cartItems, productCounts);

    // Hiển thị tổng tiền với định dạng tiền tệ
    totalPriceElement.innerText = 'Tổng giá: ' + formatCurrency(total);
    }
  }

  function redirectToPayment() {
  // Kiểm tra giỏ hàng có sản phẩm không trước khi chuyển hướng
  var cartItems = JSON.parse(localStorage.getItem('cart')) || [];
  if (cartItems.length > 0) {
    // Chuyển hướng sang trang thanh toán (đặt đường dẫn tương ứng của trang thanh toán)
    window.location.href = '/thanh-toan'; // Đặt đường dẫn đến trang thanh toán của bạn ở đây
  } else {
    alert('Giỏ hàng của bạn đang trống. Vui lòng thêm sản phẩm vào giỏ hàng trước khi thanh toán.');
  }
  }

  function removeItemByName(productName) {
    var cartItems = JSON.parse(localStorage.getItem('cart')) || [];

    // Tìm index của sản phẩm cần xoá
    var index = cartItems.findIndex(item => item.name === productName);

    if (index !== -1) {
      cartItems.splice(index, 1);
      localStorage.setItem('cart', JSON.stringify(cartItems));
      displayCartItems(); // Cập nhật hiển thị giỏ hàng sau khi xoá
    }
  }

  function formatCurrency(amount) {
    return new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(amount);
  }
</script>
